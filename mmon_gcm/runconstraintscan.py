# AUTOGENERATED! DO NOT EDIT! File to edit: ../src/3.2_run_constraint_scan.ipynb.

# %% auto 0
__all__ = ['test', 'results_path', 'model_path', 'constraints_csv', 'light_colour', 'no_cores', 'constraints', 'model',
           'batch_size', 'df', 'num_batches']

# %% ../src/3.2_run_constraint_scan.ipynb 5
import sys
import os

import cobra
import mmon_gcm.constraintscan  # from x import y syntax doesn't work because of nbdev export format
import pandas as pd
from pandarallel import pandarallel

# %% ../src/3.2_run_constraint_scan.ipynb 6
test = False

# %% ../src/3.2_run_constraint_scan.ipynb 8
results_path = sys.argv[1]
model_path = sys.argv[2]
constraints_csv = sys.argv[3]
light_colour = sys.argv[4]
no_cores = int(sys.argv[5])

# %% ../src/3.2_run_constraint_scan.ipynb 9
constraints = pd.read_csv(constraints_csv, index_col=[0], header=[0])
model = cobra.io.load_json_model(model_path)

# %% ../src/3.2_run_constraint_scan.ipynb 15
# Define the batch size
batch_size = 100

df = constraints
# Calculate the number of batches
num_batches = len(df) // batch_size + 1

# Iterate through batches
for batch_number in range(num_batches):
    # Calculate the start and end indices for the current batch
    start_index = batch_number * batch_size
    end_index = (batch_number + 1) * batch_size

    # Slice the DataFrame for the current batch
    current_batch = df.iloc[start_index:end_index]

    if not os.path.exists(f"{results_path[:-4]}_{batch_number+1}.csv"):
        pandarallel.initialize(nb_workers=no_cores, progress_bar=False)
        #scan_solution = constraints.parallel_apply(
        scan_solution = current_batch.parallel_apply(
            mmon_gcm.constraintscan.solve_model_for_constraint_scan,
            args=([model, light_colour, False]),
            axis=1,
        )

        solution_df = pd.DataFrame()
        for i, solution in scan_solution.items():
            # this is to catch infeasible solutions
            try:
                solution_df = solution_df.append(
                    solution.to_frame().loc[:, "fluxes"], ignore_index=True
                )
            except:
                solution_df = solution_df.append(pd.Series(dtype=float), ignore_index=True)

        solution_df.to_csv(f"{results_path[:-4]}_{batch_number+1}.csv")
