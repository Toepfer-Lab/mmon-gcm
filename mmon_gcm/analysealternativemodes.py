# AUTOGENERATED! DO NOT EDIT! File to edit: ../src/4.3_analyse_alternative_flux_modes.ipynb.

# %% auto 0
__all__ = ['light', 'atpase_constrained', 'starch_knockout', 'input_dir', 'output_dir', 'model_dir', 'map_path', 'json_model',
           'atpase_dict', 'starch_dict', 'alternative_modes_df', 'pfba_df', 'averages_df', 'percentage_difference_df',
           'map', 'significance_threshold', 'pearson_df', 'reactions_higher_in_pfba', 'pfba_variable_pathways', 'G',
           'S', 'get_reactions_to_investigate']

# %% ../src/4.3_analyse_alternative_flux_modes.ipynb 2
import sys

# from x import y syntax doesn't work because of nbdev export format
import mmon_gcm.analysing
import mmon_gcm.helper
import networkx as nx
from ipycytoscape import CytoscapeWidget

# %% ../src/4.3_analyse_alternative_flux_modes.ipynb 10
light = sys.argv[1]
atpase_constrained = mmon_gcm.helper.convert_true_false(sys.argv[2])
starch_knockout = mmon_gcm.helper.convert_true_false(sys.argv[3])
input_dir = sys.argv[4]
output_dir = sys.argv[5]
model_dir = sys.argv[6]

map_path = input_dir + "/map.json"
json_model = model_dir + "/4_stage_GC.json"

atpase_dict = {
    True: "constrained",
    False: "unconstrained"
}

starch_dict = {
    True: "ko",
    False: "wt",
}

# %% ../src/4.3_analyse_alternative_flux_modes.ipynb 11
alternative_modes_df, pfba_df, averages_df = mmon_gcm.analysing.get_solution_dfs(
    light, atpase_constrained, starch_knockout, output_dir
)

# %% ../src/4.3_analyse_alternative_flux_modes.ipynb 14
percentage_difference_df = mmon_gcm.analysing.get_percentage_difference_df(pfba_df, averages_df)

# %% ../src/4.3_analyse_alternative_flux_modes.ipynb 15
map = mmon_gcm.analysing.get_difference_map(percentage_difference_df, map_path, json_model)
map

# %% ../src/4.3_analyse_alternative_flux_modes.ipynb 18
significance_threshold = (
    0.1  # set threshold above which a correlation is considered to exist
)

# %% ../src/4.3_analyse_alternative_flux_modes.ipynb 20
pearson_df = mmon_gcm.analysing.get_pearson(alternative_modes_df.loc[percentage_difference_df.index])

# %% ../src/4.3_analyse_alternative_flux_modes.ipynb 21
reactions_higher_in_pfba = percentage_difference_df["% Difference"] < 0
pfba_variable_pathways = pearson_df.loc[
    reactions_higher_in_pfba, reactions_higher_in_pfba
]

# %% ../src/4.3_analyse_alternative_flux_modes.ipynb 23
G = nx.from_pandas_adjacency(
    mmon_gcm.analysing.get_adjacency(pfba_variable_pathways, significance_threshold)
)
S = [G.subgraph(c).copy() for c in nx.connected_components(G)]

# %% ../src/4.3_analyse_alternative_flux_modes.ipynb 25
map = mmon_gcm.analysing.get_pfba_pathways_map(S, map_path, json_model)
map.save_html(
    output_dir +
    f"/alternative_weighting/analysis/{light}_{atpase_dict[atpase_constrained]}_{starch_dict[starch_knockout]}_pfba_pathways.html"
)
map

# %% ../src/4.3_analyse_alternative_flux_modes.ipynb 27
def get_reactions_to_investigate(csv_path):

    if not os.path.exists(csv_path):
        df = pd.DataFrame(columns=["Threshold"])
        df.index.name = "Reactions"
        df.to_csv(csv_path)

    df = pd.read_csv(csv_path, index_col=0)

    return df
