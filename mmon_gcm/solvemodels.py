# AUTOGENERATED! DO NOT EDIT! File to edit: ../src/2.1_solvingmodel.ipynb.

# %% auto 0
__all__ = ['run_fva', 'no_processes', 'output_dir', 'model_file', 'map_file', 'parameters_file', 'four_stage_GC_model',
           'parameters_df', 'arabidopsis_supermodel']

# %% ../src/2.1_solvingmodel.ipynb 3
import json
import sys

import cobra
# from x import y syntax doesn't work because of nbdev export format
import mmon_gcm.buildingediting
import mmon_gcm.solving
import mmon_gcm.supermodel
import pandas as pd

# %% ../src/2.1_solvingmodel.ipynb 5
run_fva = sys.argv[1]
if run_fva == "True":
    run_fva = True
elif run_fva == "False":
    run_fva = False
else:
    raise ValueError(f"Please specify True or False for run_fva, not {run_fva}")

no_processes = int(sys.argv[2])
output_dir = sys.argv[3]
model_file = sys.argv[4]
map_file = sys.argv[5]
parameters_file = sys.argv[6]

# %% ../src/2.1_solvingmodel.ipynb 8
four_stage_GC_model = cobra.io.sbml.read_sbml_model(model_file)  # read model

# %% ../src/2.1_solvingmodel.ipynb 10
print(four_stage_GC_model.solver.configuration.tolerances.integrality)
print(four_stage_GC_model.solver.configuration.tolerances.feasibility)
four_stage_GC_model.solver.configuration.tolerances.feasibility = 1e-8  # 1e-9 takes a long time to solve
print(four_stage_GC_model.solver.configuration.tolerances.feasibility)

# %% ../src/2.1_solvingmodel.ipynb 12
if run_fva == True:

    linker_list = [
        reaction
        for reaction in four_stage_GC_model.reactions
        if "gc_Linker_2" in reaction.id
        or "gc_Linker_1" in reaction.id
        or "_total_pseudolinker_1" in reaction.id
        or "_total_pseudolinker_2" in reaction.id
        or "ae_gc" in reaction.id
    ]

    extra_fva_rxns = set()

    with open(map_file, "r+") as f:
        map_data = json.load(f)

    for reaction in map_data[1]["reactions"].values():
        extra_fva_rxns.add(four_stage_GC_model.reactions.get_by_id(reaction["bigg_id"]))

    fva_list = list(set(linker_list) | extra_fva_rxns)

else:
    fva_list = []

# %% ../src/2.1_solvingmodel.ipynb 15
parameters_df = pd.read_csv(parameters_file, index_col=0)
parameters_df

# %% ../src/2.1_solvingmodel.ipynb 16
arabidopsis_supermodel = mmon_gcm.supermodel.SuperModel(parameters_df.loc[:, "Value"], fba_model=four_stage_GC_model)

# %% ../src/2.1_solvingmodel.ipynb 17
arabidopsis_supermodel.get_volumes(printouts=True);

# %% ../src/2.1_solvingmodel.ipynb 21
arabidopsis_supermodel.constrain_osmolarity(printouts=True);

# %% ../src/2.1_solvingmodel.ipynb 27
arabidopsis_supermodel.constrain_photons(150, printouts=True);

# %% ../src/2.1_solvingmodel.ipynb 28
arabidopsis_supermodel.add_maintenance();

# %% ../src/2.1_solvingmodel.ipynb 33
with arabidopsis_supermodel.fba_model as m:

    m.reactions.Photon_tx_gc_2.upper_bound = 0
    m.reactions.Photon_tx_me_2.upper_bound = 0

    blue_unconstrained_wt, blue_unconstrained_wt_solution = mmon_gcm.solving.get_pfba_fva_solution(
        m, rxn_list=fva_list[:5], processes=no_processes)

# %% ../src/2.1_solvingmodel.ipynb 35
blue_unconstrained_wt_solution.to_csv(output_dir + f"blue_unconstrained_wt.csv")

# %% ../src/2.1_solvingmodel.ipynb 37
with arabidopsis_supermodel.fba_model as m:

    m.reactions.Photon_tx_gc_2.upper_bound = 0
    m.reactions.Photon_tx_me_2.upper_bound = 0
    mmon_gcm.buildingediting.set_bounds_multi(m, "RXN_1827_p_gc", 0, 0)

    blue_unconstrained_starchko, blue_unconstrained_starchko_solution = mmon_gcm.solving.get_pfba_fva_solution(
        m, rxn_list=fva_list, processes=no_processes)

# %% ../src/2.1_solvingmodel.ipynb 38
blue_unconstrained_starchko_solution.to_csv(output_dir + "blue_unconstrained_starchko.csv")

# %% ../src/2.1_solvingmodel.ipynb 41
with arabidopsis_supermodel.fba_model as m:

    m.reactions.Photon_tx_gc_2.upper_bound = 0
    m.reactions.Photon_tx_me_2.upper_bound = 0

    gc_atpase_upper_bound = arabidopsis_supermodel.get_atpase_constraint_value(7.48)
    mmon_gcm.buildingediting.set_bounds_multi(m, "PROTON_ATPase_c_gc", 0, gc_atpase_upper_bound)

    blue_constrained_wt, blue_constrained_wt_solution = mmon_gcm.solving.get_pfba_fva_solution(
        m, rxn_list=fva_list, processes=no_processes)

# %% ../src/2.1_solvingmodel.ipynb 42
blue_constrained_wt_solution.to_csv(output_dir + "blue_constrained_wt.csv")

# %% ../src/2.1_solvingmodel.ipynb 44
with arabidopsis_supermodel.fba_model as m:

    m.reactions.Photon_tx_gc_2.upper_bound = 0
    m.reactions.Photon_tx_me_2.upper_bound = 0

    gc_atpase_upper_bound = arabidopsis_supermodel.get_atpase_constraint_value(7.48)
    mmon_gcm.buildingediting.set_bounds_multi(m, "PROTON_ATPase_c_gc", 0, gc_atpase_upper_bound)

    mmon_gcm.buildingediting.set_bounds_multi(m, "RXN_1827_p_gc", 0, 0)

    blue_constrained_starchko, blue_constrained_starchko_solution = mmon_gcm.solving.get_pfba_fva_solution(
        m, rxn_list=fva_list, processes=no_processes)

# %% ../src/2.1_solvingmodel.ipynb 45
blue_constrained_starchko_solution.to_csv(output_dir + "blue_constrained_starchko.csv")

# %% ../src/2.1_solvingmodel.ipynb 49
with arabidopsis_supermodel.fba_model as m:

    white_unconstrained_wt, white_unconstrained_wt_solution = mmon_gcm.solving.get_pfba_fva_solution(
        m, rxn_list=fva_list, processes=no_processes)

# %% ../src/2.1_solvingmodel.ipynb 50
white_unconstrained_wt_solution.to_csv(output_dir + "white_unconstrained_wt.csv")

# %% ../src/2.1_solvingmodel.ipynb 52
with arabidopsis_supermodel.fba_model as m:

    mmon_gcm.buildingediting.set_bounds_multi(m, "RXN_1827_p_gc", 0, 0)

    white_unconstrained_starchko, white_unconstrained_starchko_solution = mmon_gcm.solving.get_pfba_fva_solution(
        m, rxn_list=fva_list, processes=no_processes)

# %% ../src/2.1_solvingmodel.ipynb 53
white_unconstrained_starchko_solution.to_csv(output_dir + "white_unconstrained_starchko.csv")

# %% ../src/2.1_solvingmodel.ipynb 56
with arabidopsis_supermodel.fba_model as m:

    gc_atpase_upper_bound = arabidopsis_supermodel.get_atpase_constraint_value(7.48)
    mmon_gcm.buildingediting.set_bounds_multi(m, "PROTON_ATPase_c_gc", 0, gc_atpase_upper_bound)

    white_constrained_wt, white_constrained_wt_solution = mmon_gcm.solving.get_pfba_fva_solution(
        m, rxn_list=fva_list, processes=no_processes)

# %% ../src/2.1_solvingmodel.ipynb 57
white_constrained_wt_solution.to_csv(output_dir + "white_constrained_wt.csv")

# %% ../src/2.1_solvingmodel.ipynb 59
with arabidopsis_supermodel.fba_model as m:

    gc_atpase_upper_bound = arabidopsis_supermodel.get_atpase_constraint_value(7.48)
    mmon_gcm.buildingediting.set_bounds_multi(m, "PROTON_ATPase_c_gc", 0, gc_atpase_upper_bound)

    mmon_gcm.buildingediting.set_bounds_multi(m, "RXN_1827_p_gc", 0, 0)

    white_constrained_starchko, white_constrained_starchko_solution = mmon_gcm.solving.get_pfba_fva_solution(
        m, rxn_list=fva_list, processes=no_processes)

# %% ../src/2.1_solvingmodel.ipynb 60
white_constrained_starchko_solution.to_csv(output_dir + "white_constrained_starchko.csv")

# %% ../src/2.1_solvingmodel.ipynb 64
with arabidopsis_supermodel.fba_model as m:

    for p in [1, 2, 3, 4]:
        m.reactions.get_by_id(f"Photon_tx_gc_{p}").bounds = (0, 0)

    nops_unconstrained_wt, nops_unconstrained_wt_solution = mmon_gcm.solving.get_pfba_fva_solution(
        m, rxn_list=fva_list, processes=no_processes)

# %% ../src/2.1_solvingmodel.ipynb 65
nops_unconstrained_wt_solution.to_csv(output_dir + "nops_unconstrained_wt.csv")

# %% ../src/2.1_solvingmodel.ipynb 67
with arabidopsis_supermodel.fba_model as m:

    for p in [1, 2, 3, 4]:
        m.reactions.get_by_id(f"Photon_tx_gc_{p}").bounds = (0, 0)

    mmon_gcm.buildingediting.set_bounds_multi(m, "RXN_1827_p_gc", 0, 0)

    nops_unconstrained_starchko, nops_unconstrained_starchko_solution = mmon_gcm.solving.get_pfba_fva_solution(
        m, rxn_list=fva_list, processes=no_processes)

# %% ../src/2.1_solvingmodel.ipynb 68
nops_unconstrained_starchko_solution.to_csv(output_dir + "nops_unconstrained_starchko.csv")

# %% ../src/2.1_solvingmodel.ipynb 71
with arabidopsis_supermodel.fba_model as m:

    for p in [1, 2, 3, 4]:
        m.reactions.get_by_id(f"Photon_tx_gc_{p}").bounds = (0, 0)

    gc_atpase_upper_bound = arabidopsis_supermodel.get_atpase_constraint_value(7.48)
    mmon_gcm.buildingediting.set_bounds_multi(m, "PROTON_ATPase_c_gc", 0, gc_atpase_upper_bound)

    nops_unconstrained_wt, nops_unconstrained_wt_solution = mmon_gcm.solving.get_pfba_fva_solution(
        m, rxn_list=fva_list, processes=no_processes)

# %% ../src/2.1_solvingmodel.ipynb 72
nops_unconstrained_wt_solution.to_csv(output_dir + "nops_constrained_wt.csv")

# %% ../src/2.1_solvingmodel.ipynb 74
with arabidopsis_supermodel.fba_model as m:

    for p in [1, 2, 3, 4]:
        m.reactions.get_by_id(f"Photon_tx_gc_{p}").bounds = (0, 0)

    gc_atpase_upper_bound = arabidopsis_supermodel.get_atpase_constraint_value(7.48)
    mmon_gcm.buildingediting.set_bounds_multi(m, "PROTON_ATPase_c_gc", 0, gc_atpase_upper_bound)

    mmon_gcm.buildingediting.set_bounds_multi(m, "RXN_1827_p_gc", 0, 0)

    nops_unconstrained_starchko, nops_unconstrained_starchko_solution = mmon_gcm.solving.get_pfba_fva_solution(
        m, rxn_list=fva_list, processes=no_processes)

# %% ../src/2.1_solvingmodel.ipynb 75
nops_unconstrained_starchko_solution.to_csv(output_dir + "nops_constrained_starchko.csv")
